[{"C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\index.js":"1","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\App.js":"2","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Navbar.js":"3","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Signin.js":"4","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\HomePage.js":"5","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\contexts\\AuthContext.js":"6","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\firebase.js":"7","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Signup.js":"8","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\PrivateRoute.js":"9","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\NewPoll.js":"10","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\NewPollOneQue.js":"11","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\OnePoll.js":"12","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Charts.js":"13","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Dashboard.js":"14","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Error.js":"15","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\MyPolls.js":"16"},{"size":197,"mtime":1607421948909,"results":"17","hashOfConfig":"18"},{"size":1359,"mtime":1608125373415,"results":"19","hashOfConfig":"18"},{"size":1484,"mtime":1608110553446,"results":"20","hashOfConfig":"18"},{"size":2281,"mtime":1607521866617,"results":"21","hashOfConfig":"18"},{"size":3412,"mtime":1608125234613,"results":"22","hashOfConfig":"18"},{"size":1121,"mtime":1607510261787,"results":"23","hashOfConfig":"18"},{"size":523,"mtime":1607511499790,"results":"24","hashOfConfig":"18"},{"size":2742,"mtime":1607521794564,"results":"25","hashOfConfig":"18"},{"size":469,"mtime":1607520135928,"results":"26","hashOfConfig":"18"},{"size":3471,"mtime":1608115519972,"results":"27","hashOfConfig":"18"},{"size":3701,"mtime":1607868430990,"results":"28","hashOfConfig":"18"},{"size":5482,"mtime":1608121040272,"results":"29","hashOfConfig":"18"},{"size":2032,"mtime":1607945815600,"results":"30","hashOfConfig":"18"},{"size":4592,"mtime":1608123035223,"results":"31","hashOfConfig":"18"},{"size":481,"mtime":1608125822186,"results":"32","hashOfConfig":"18"},{"size":3495,"mtime":1608190808776,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"6qijyl",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\index.js",[],["76","77"],"C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\App.js",[],"C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Navbar.js",["78"],"import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Logo from '../images/Logo.png';\r\nimport { useAuth } from '../contexts/AuthContext.js'\r\nimport './Navbar.css'\r\n\r\n\r\nexport default function Navbar() {\r\n    const { logout, currentUser } = useAuth();\r\n    const history = useHistory();\r\n    const handleLogout = async () => {\r\n        try {\r\n            await logout();\r\n            history.push('/signin')\r\n        }\r\n        catch {\r\n            console.log(\"failed to logout\");\r\n        }\r\n    }\r\n\r\n    return currentUser ? (<div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <Link to='/'>\r\n                <img className='logo' src={Logo} alt='' width='70px' />\r\n            </Link>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul className=\"navbar-nav\">\r\n                        <Link className=\"nav-link\" to=\"/newpoll\">\r\n                            <li className=\"nav-item\">New Poll</li>\r\n                        </Link>\r\n                        <Link className=\"nav-link\" to=\"/mypolls\">\r\n                            <li className=\"nav-item\">My Polls</li>\r\n                        </Link>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <a onClick={handleLogout}>Log Out</a>\r\n        </nav>\r\n    </div >) : <></>\r\n\r\n\r\n}","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Signin.js",[],"C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\HomePage.js",["79"],"import React, { useState, useEffect } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './HomePage.css';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n\r\nexport default function HomePage() {\r\n    const [lastPolls, setLastPolls] = useState([])\r\n\r\n    const { currentUser } = useAuth()\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const { data } = await axios.post(`/api/user/history/recent`, {\r\n                creator: currentUser.email\r\n            })\r\n            setLastPolls(data)\r\n            console.log(data);\r\n        })()\r\n    }, [])\r\n\r\n    return lastPolls ? (\r\n        <div className=\"homePage-body\">\r\n            <div className=\"header text-center\" >\r\n                <h1>PollMe</h1>\r\n                <h4>\r\n                    PollMe is a Live Poll app that keeps the students engaged,\r\n                    and provide analytics to the lecturer!\r\n                </h4>\r\n                <p>\r\n                    <Link to='/newpoll'>\r\n                        <Button variant=\"info\">Make a new Poll</Button>\r\n                    </Link>\r\n                </p>\r\n            </div>\r\n            <div className=\"container\">\r\n                <h3 className=\"popularHeader\">My Last Polls</h3>\r\n                <div className=\"row\">\r\n                    {lastPolls.map(pollPreview => {\r\n                        return (\r\n                            <div className=\"col-md-4\">\r\n                                <div className=\"card mb-4 shadow-sm\">\r\n                                    <div class=\"card-header\">\r\n                                        Created At: {new Date(pollPreview.date).toDateString()}\r\n                                    </div>\r\n                                    <div className=\"card-body last-poll-card\">\r\n                                        <h5 class=\"card-title\">{pollPreview.title}</h5>\r\n                                        <p className=\"card-text\">{pollPreview.explanation}</p>\r\n                                        <div className=\"d-flex justify-content-between align-items-center\">\r\n                                            <div className=\"btn-group\">\r\n                                                <Link to={`/dashboard/${pollPreview._id}`}>\r\n                                                    <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\">View Dashboard</button>\r\n                                                </Link>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"card-footer text-muted\" style={{ fontSize: \"75%\", backgroundColor: \"white\" }}>\r\n                                        Public URL: {`http://localhost:3000/poll/${pollPreview._id}`}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <footer className=\"footer text-muted\">\r\n                <div className=\"container footer-container\">\r\n                    <p> &copy; PollMe made by Eran Dahan and Itai Brand</p>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    ) : <></>\r\n}","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\contexts\\AuthContext.js",[],"C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\firebase.js",[],["80","81"],"C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Signup.js",[],"C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\PrivateRoute.js",[],"C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\NewPoll.js",["82","83"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport './NewPoll.css'\r\nimport NewPollOneQue from './NewPollOneQue';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function NewPoll() {\r\n    const [answers, setAnswers] = useState([])\r\n    const [inputs, setInputs] = useState([])\r\n    const [show, setShow] = useState(false);\r\n    const [url, setUrl] = useState()\r\n\r\n    const pollName = useRef()\r\n    const pollExplanation = useRef();\r\n\r\n    const { currentUser } = useAuth()\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n    }\r\n\r\n    const addQue = () => {\r\n        const temp = answers.slice();\r\n        const newInputs = inputs.slice()\r\n        newInputs.push({})\r\n        temp.push(<NewPollOneQue numOfQue={temp.length + 1} inputs={newInputs} setInputs={setInputs} />)\r\n        setAnswers(temp)\r\n        setInputs(newInputs);\r\n    }\r\n\r\n    useEffect(() => {\r\n        addQue()\r\n    }, [])\r\n\r\n    const generate = async () => {\r\n        const finalInput = inputs.slice();\r\n        finalInput.forEach(question => {\r\n            question.votes1 = 0;\r\n            question.votes2 = 0;\r\n            question.votes3 = 0;\r\n            question.votes4 = 0;\r\n        })\r\n        const poll = {\r\n            title: pollName.current.value,\r\n            explanation: pollExplanation.current.value,\r\n            creator: currentUser.email,\r\n            questions: finalInput,\r\n            date: new Date()\r\n        }\r\n        const { data } = await axios.post(\"/api/polls\", poll);\r\n        setUrl(data)\r\n        handleShow()\r\n    }\r\n\r\n    return (\r\n        <div className=\"new-poll-body\">\r\n            <div className=\"card new-poll-card\" width=\"18rem;\">\r\n                <div className=\"card-body\">\r\n                    <h2 htmlFor=\"header\">Poll Name</h2>\r\n                    <textarea className=\"poll-name\" ref={pollName} placeholder=\"Insert Poll Name\" />\r\n                    <br />\r\n                    <h5 htmlFor=\"header\">Poll Explaination</h5>\r\n                    <textarea className=\"poll-explaination\" ref={pollExplanation} placeholder=\"Insert Explaination\" />\r\n                </div>\r\n                <form onSubmit={handleSubmit} className=\"form-questions\">\r\n                    <div id=\"answersSection\" >\r\n                        {answers}\r\n                    </div>\r\n                    <a onClick={addQue}>Add Question</a>\r\n                    <br />\r\n                    <button onClick={generate} className=\"btn btn-info btn-md new-poll-btn\">Generate</button>\r\n                </form>\r\n            </div>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Poll URL</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Woohoo, you're poll URL is {`http://localhost:3000/poll/${url}`}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Link to={`/dashboard/${url}`}>\r\n                        <Button variant=\"info\" onClick={handleClose}>\r\n                            Go To Dashboard\r\n                        </Button>\r\n                    </Link>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\NewPollOneQue.js",["84"],"import React, { useState, useEffect } from 'react'\r\n\r\nexport default function NewPollOneQue(prop) {\r\n\r\n    const [question, setQuestion] = useState(\"\")\r\n    const [answer1, setAnswer1] = useState(\"\")\r\n    const [answer2, setAnswer2] = useState(\"\")\r\n    const [answer3, setAnswer3] = useState(\"\")\r\n    const [answer4, setAnswer4] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        const newInputs = prop.inputs.slice()\r\n        newInputs[prop.numOfQue - 1].question = question;\r\n        newInputs[prop.numOfQue - 1].answer1 = answer1;\r\n        newInputs[prop.numOfQue - 1].answer2 = answer2;\r\n        newInputs[prop.numOfQue - 1].answer3 = answer3;\r\n        newInputs[prop.numOfQue - 1].answer4 = answer4;\r\n        prop.setInputs(newInputs)\r\n    }, [question, answer1, answer2, answer3, answer4])\r\n\r\n    function capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"question\">question number {prop.numOfQue}</label>\r\n            <input type=\"text\" name=\"question\" onChange={e => setQuestion(capitalizeFirstLetter(e.target.value))} className=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"Insert Question\" />\r\n            <div className=\"container answers\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                        <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\" id=\"basic-addon1\">1</span>\r\n                            </div>\r\n                            <input type=\"text\" name=\"answer1\" onChange={e => setAnswer1(e.target.value)} className=\"form-control\" placeholder=\"Answer\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                        <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\" id=\"basic-addon1\">2</span>\r\n                            </div>\r\n                            <input type=\"text\" name=\"answer2\" onChange={e => setAnswer2(e.target.value)} className=\"form-control\" placeholder=\"Answer\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                        <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\" id=\"basic-addon1\">3</span>\r\n                            </div>\r\n                            <input type=\"text\" name=\"answer3 \" onChange={e => setAnswer3(e.target.value)} className=\"form-control\" placeholder=\"Answer\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                        <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\" id=\"basic-addon1\">4</span>\r\n                            </div>\r\n                            <input type=\"text\" name=\"answer4\" onChange={e => setAnswer4(e.target.value)} className=\"form-control\" placeholder=\"Answer\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\OnePoll.js",["85","86"],"import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Modal } from 'react-bootstrap';\r\nimport './OnePoll.css';\r\nimport Logo from '../images/Logo.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function OnePoll() {\r\n    const [onePoll, setOnePoll] = useState();\r\n    const [show, setShow] = useState(false);\r\n    const [modalBody, setModalBody] = useState(\"\");\r\n    const { id } = useParams();\r\n    const [inputs, setInputs] = useState([]);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => { setShow(true) };\r\n\r\n    const pickAnswer = (e) => {\r\n        const votes = inputs.slice();\r\n        votes[e.target.name] = e.target.value;\r\n        setInputs(votes);\r\n    }\r\n\r\n    const submit = async () => {\r\n        if (inputs.length === onePoll.questions.length && !inputs.includes(undefined)) {\r\n            await axios.post(`/api/polls/${id}`, inputs);\r\n            setModalBody(\"Great Job! Thank you for your input\");\r\n            handleShow()\r\n        }\r\n        else {\r\n            setModalBody(\"Please Finish Answer All The Questions!\");\r\n            handleShow()\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const { data } = await axios.get(`/api/polls/${id}`);\r\n        setOnePoll(data);\r\n    }, [])\r\n\r\n    return onePoll ? (\r\n        <div>\r\n            <div className=\"one-poll-body\">\r\n                <div className=\"card new-poll-card\" width=\"18rem;\">\r\n                    <div className=\"card-body\">\r\n                        <h2 className=\"titleHeader\" htmlFor=\"header\">{onePoll.title}</h2>\r\n                        <br />\r\n                        <h5 htmlFor=\"header\">{onePoll.explanation}</h5>\r\n                    </div>\r\n                    <div className=\"form-questions\">\r\n                        {onePoll.questions.map((question, index) => {\r\n                            return (\r\n                                <div className=\"container answers\">\r\n                                    <span className=\"input-group-text\" id=\"basic-addon1\">{index + 1}. {question.question}</span>\r\n                                    <label ></label><br />\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-sm\">\r\n                                            <div className=\"input-group mb-3\">\r\n                                                <input type=\"radio\" id={question._id + \"1\"} name={index} value=\"1\" onChange={pickAnswer} />\r\n                                                <label htmlFor={question._id + \"1\"} >1. {question.answer1}</label><br />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col-sm\">\r\n                                            <div className=\"input-group mb-3\">\r\n                                                <input type=\"radio\" id={question._id + \"2\"} name={index} value=\"2\" onChange={pickAnswer} />\r\n                                                <label htmlFor={question._id + \"2\"}>2. {question.answer2}</label><br />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col-sm\">\r\n                                            <div className=\"input-group mb-3\">\r\n                                                <input type=\"radio\" id={question._id + \"3\"} name={index} value=\"3\" onChange={pickAnswer} />\r\n                                                <div htmlFor={question._id + \"3\"}>3. {question.answer3}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col-sm\">\r\n                                            <div className=\"input-group mb-3\">\r\n                                                <input type=\"radio\" id={question._id + \"4\"} name={index} value=\"4\" onChange={pickAnswer} />\r\n                                                <label htmlFor={question._id + \"4\"}>4. {question.answer4}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        <div id=\"answersSection\" >\r\n                        </div>\r\n                        <h5>Created by: {onePoll.creator}</h5>\r\n                        <br />\r\n                    </div>\r\n                    <button className=\"btn btn-info btn-md send-button\" onClick={submit}>Send!</button>\r\n                </div>\r\n                <div className=\"container footer-container\">\r\n                    <Link to='/'>\r\n                        <img className='one-pool' src={Logo} alt='' width='70px' />\r\n                    </Link>\r\n                    <br />\r\n                    <br />\r\n                    <p> &copy; PollMe made by Eran Dahan and Itai Brand</p>\r\n                </div>\r\n            </div>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Hey You</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{modalBody}</Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    ) : <></>\r\n}","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Charts.js",["87"],"import React, { useEffect, useState } from 'react'\r\nimport { PieChart, Pie, BarChart, Bar, Tooltip, ResponsiveContainer, Cell, Legend, CartesianGrid, XAxis, YAxis } from 'recharts';\r\n\r\nexport default function Charts({ question }) {\r\n    const [data, setData] = useState([]);\r\n    const colors = [\"#a0e1db\", \"#8dd5ff\", \"#ace49d\", \"#88d496\"]\r\n\r\n    useEffect(() => {\r\n        const array = []\r\n        array.push({\r\n            answer: question.answer1,\r\n            votes: question.votes1\r\n        })\r\n        array.push({\r\n            answer: question.answer2,\r\n            votes: question.votes2\r\n        })\r\n        array.push({\r\n            answer: question.answer3,\r\n            votes: question.votes3\r\n        })\r\n        array.push({\r\n            answer: question.answer4,\r\n            votes: question.votes4\r\n        })\r\n        setData(array);\r\n    }, [])\r\n\r\n    return (\r\n        <div style={{ display: \"flex\" }}>\r\n            <ResponsiveContainer width=\"50%\" height={250}>\r\n                <BarChart data={data}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"answer\" />\r\n                    <YAxis dataKey=\"votes\" />\r\n                    <Tooltip />\r\n                    <Legend wrapperStyle={{ bottom: 0, left: 25 }} />\r\n                    <Bar dataKey=\"votes\" fill=\"#a0e1db\" />\r\n                </BarChart>\r\n            </ResponsiveContainer>\r\n            <ResponsiveContainer width=\"50%\" height={250}>\r\n                <PieChart >\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Pie data={data} dataKey=\"votes\" nameKey=\"answer\" cx=\"50%\" cy=\"50%\" outerRadius={50} fill=\"#8884d8\" >\r\n                        {\r\n                            data.map((entry, index) => (\r\n                                <Cell key={`cell-${index}`} fill={colors[index]} />\r\n                            ))\r\n                        }\r\n                    </Pie>\r\n                </PieChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n}","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Dashboard.js",["88"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './Dashboard.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from 'axios';\r\nimport { Carousel } from 'react-bootstrap';\r\nimport Charts from './Charts.js';\r\nimport { useAuth } from '../contexts/AuthContext.js';\r\n\r\nexport default function Dashboard() {\r\n    const [results, setResults] = useState();\r\n    const { id } = useParams();\r\n    const { currentUser } = useAuth();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const { data } = await axios.post(`/api/polls/results/${id}`, { creator: currentUser.email })\r\n            console.log(data);\r\n            setResults(data)\r\n        })()\r\n    }, [])\r\n\r\n    return results ? (\r\n        !results.error ? (\r\n            <div className=\"dashboard-body\">\r\n                <div className=\"card new-dashboard-card\" width=\"18rem;\">\r\n                    <h1 className=\"dashboard-header\">Poll Dashboard</h1>\r\n                    <div className=\"grid-container\">\r\n                        <div className=\"preview\">\r\n                            <h2>{results.title}</h2>\r\n                            <h6>{results.explanation}</h6>\r\n                            {results && results.questions.map((q, index) => {\r\n                                return (\r\n                                    <div className=\"container answers preview-container\">\r\n                                        <span className=\"input-group-text\" id=\"basic-addon1\">{index + 1}. {q.question}</span>\r\n                                        <label ></label><br />\r\n                                        <div className=\"row\">\r\n                                            {(() => {\r\n                                                const answers = [];\r\n                                                for (let i = 1; i <= 4; i++) {\r\n                                                    answers.push(\r\n                                                        <div className=\"col-sm\">\r\n                                                            <div className=\"input-group mb-3\">\r\n                                                                <input type=\"radio\" id={q._id + i} disabled name={index} value={`${i}`} />\r\n                                                                <label htmlFor={q._id + i} >{i}. {q[`answer${i}`]}</label><br />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                                return answers;\r\n                                            })()}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        <div className=\"carusela\">\r\n                            <Carousel className=\"carousel\">\r\n                                {results && results.questions.map(q => {\r\n                                    return (\r\n                                        <Carousel.Item>\r\n                                            <h3 className=\"carousel-header\">Question: {q.question}</h3>\r\n                                            <Charts question={q} />\r\n                                        </Carousel.Item>\r\n                                    )\r\n                                })}\r\n                            </Carousel>\r\n                        </div>\r\n                        <div className=\"card details\" style={{ marginLeft: \"10px\" }}>\r\n                            <div className=\"card-header\" style={{ textAlign: \"center\" }}>Details!</div>\r\n                            <ul className=\"list-group list-group-flush\">\r\n                                <li className=\"list-group-item\"><b>Poll URL:</b> {`http://localhost:3000/poll/${results._id}`}</li>\r\n                                <li className=\"list-group-item\"><b>Created At:</b> {new Date(results.date).toUTCString()}</li>\r\n                                <li className=\"list-group-item\"><b>Voted:</b> {results.questions[0].votes1 + results.questions[0].votes2 + results.questions[0].votes3 + results.questions[0].votes4}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) :\r\n            <div>\r\n                this is not your poll...\r\n            </div>) : <div></div>\r\n}","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\Error.js",["89"],"import React from 'react';\r\nimport './Error.css';\r\nimport Logo from '../images/Logo.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Error() {\r\n    return (\r\n        <div className=\"error-body\">\r\n            <h3 className=\"error-header\">404 PAGE</h3>\r\n            <br />\r\n            <Link className=\"error-link\" to=\"/\">\r\n                <img src={Logo}></img>\r\n                <h1 className=\"out\">Out</h1>\r\n            </Link>\r\n        </div>\r\n    )\r\n}","C:\\Users\\itaib\\Desktop\\cyber4s\\PollMe\\poll-me\\client\\src\\components\\MyPolls.js",["90"],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":39,"column":13,"nodeType":"97","endLine":39,"endColumn":39},{"ruleId":"98","severity":1,"message":"99","line":22,"column":8,"nodeType":"100","endLine":22,"endColumn":10,"suggestions":"101"},{"ruleId":"91","replacedBy":"102"},{"ruleId":"93","replacedBy":"103"},{"ruleId":"98","severity":1,"message":"104","line":39,"column":8,"nodeType":"100","endLine":39,"endColumn":10,"suggestions":"105"},{"ruleId":"95","severity":1,"message":"96","line":75,"column":21,"nodeType":"97","endLine":75,"endColumn":41},{"ruleId":"98","severity":1,"message":"106","line":19,"column":8,"nodeType":"100","endLine":19,"endColumn":54,"suggestions":"107"},{"ruleId":"98","severity":1,"message":"108","line":37,"column":15,"nodeType":"109","endLine":40,"endColumn":6},{"ruleId":"98","severity":1,"message":"110","line":40,"column":8,"nodeType":"100","endLine":40,"endColumn":10,"suggestions":"111"},{"ruleId":"98","severity":1,"message":"112","line":27,"column":8,"nodeType":"100","endLine":27,"endColumn":10,"suggestions":"113"},{"ruleId":"98","severity":1,"message":"114","line":21,"column":8,"nodeType":"100","endLine":21,"endColumn":10,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":13,"column":17,"nodeType":"97","endLine":13,"endColumn":33},{"ruleId":"98","severity":1,"message":"99","line":22,"column":8,"nodeType":"100","endLine":22,"endColumn":10,"suggestions":"118"},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser.email'. Either include it or remove the dependency array.","ArrayExpression",["121"],["119"],["120"],"React Hook useEffect has a missing dependency: 'addQue'. Either include it or remove the dependency array.",["122"],"React Hook useEffect has a missing dependency: 'prop'. Either include it or remove the dependency array.",["123"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["124"],"React Hook useEffect has missing dependencies: 'question.answer1', 'question.answer2', 'question.answer3', 'question.answer4', 'question.votes1', 'question.votes2', 'question.votes3', and 'question.votes4'. Either include them or remove the dependency array.",["125"],"React Hook useEffect has missing dependencies: 'currentUser.email' and 'id'. Either include them or remove the dependency array.",["126"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["127"],"no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"128","fix":"140"},"Update the dependencies array to be: [currentUser.email]",{"range":"141","text":"142"},"Update the dependencies array to be: [addQue]",{"range":"143","text":"144"},"Update the dependencies array to be: [question, answer1, answer2, answer3, answer4, prop]",{"range":"145","text":"146"},"Update the dependencies array to be: [id]",{"range":"147","text":"148"},"Update the dependencies array to be: [question.answer1, question.answer2, question.answer3, question.answer4, question.votes1, question.votes2, question.votes3, question.votes4]",{"range":"149","text":"150"},"Update the dependencies array to be: [currentUser.email, id]",{"range":"151","text":"152"},{"range":"153","text":"142"},[696,698],"[currentUser.email]",[1206,1208],"[addQue]",[746,792],"[question, answer1, answer2, answer3, answer4, prop]",[1387,1389],"[id]",[860,862],"[question.answer1, question.answer2, question.answer3, question.answer4, question.votes1, question.votes2, question.votes3, question.votes4]",[738,740],"[currentUser.email, id]",[720,722]]